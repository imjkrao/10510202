###########################################################
#---------------------------------------------------------#
##### Lecture 1 code: introduction to R and RStudio #######
#---------------------------------------------------------#
###########################################################

##################################
# Sequences:
##################################

# This is a simple command: add 2 and 2
2 + 2

# Create 7 random numbers from the Uniform distribution (default is between 0 and 1):
runif(7)

# Use the concatenate function:
x <- c(1, 2, 4)

# Display the content of x:
x

##################################
# Assignment operator:
##################################

# Show that both <- and = are valid to assign a value to a name
z <- 2 + 2
z

z = 2 + 2
z

# Access parts of x with square brackets:
x[3]
x[2:3]

# Find the sum of x and store it:
sum(x)

# Create a new variable which stores the result instead:
y <- sum(x)
y

##################################
# Simple built-in functions:
##################################

# Use multiple functions together:
z <- log(sum(x))
z

##################################
# Built-in datasets:
##################################

# Look at some data sets:
data()

# Run some basic functions on the Nile dataset:
Nile
help(Nile)
mean(Nile)
plot(Nile)
hist(Nile)

##################################
# Getting help:
##################################

# Get help using the help() function:
help(sum)
help.search('standard deviation')
?mean
??"standard deviation"

# Look at examples for a function:
example(sum)

# (Note that example() is a function which works on other functions)

##################################
# A first function:
##################################

# Oddcount function
oddcount <- function(x) {
  # Set k to be 0
  k <- 0
  for(n in x) {
    # %% finds remainder on division
    if(n %% 2 == 1) k <- k + 1
  }
  return(k)
}

# Run the function:
oddcount(c(1, 3, 5))
oddcount(c(1, 2, 3, 7, 9))

# The first result should be 3
# It's better to test using the second vector,
# just to make sure that we are not counting *every* number
